<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Sound of Wind]]></title>
  <link href="http://popol1991.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://popol1991.github.com/"/>
  <updated>2013-03-10T20:49:35+08:00</updated>
  <id>http://popol1991.github.com/</id>
  <author>
    <name><![CDATA[popol]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSP与Servlet的区别以及为什么Servlet不是线程安全]]></title>
    <link href="http://popol1991.github.com/blog/2013/03/08/jspyu-servletde-qu-bie-yi-ji-wei-shi-yao-servletbu-shi-xian-cheng-an-quan/"/>
    <updated>2013-03-08T16:07:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2013/03/08/jspyu-servletde-qu-bie-yi-ji-wei-shi-yao-servletbu-shi-xian-cheng-an-quan</id>
    <content type="html"><![CDATA[<p>其实这俩问题我看过好几遍了，还记得在新加坡的时候考完试马不停蹄的就回图书馆看servlet解析了，但一直都没记忆清楚…直接导致这两天面试的时候被问道这些问题只能给个答案不能说为什么，弄得像我是死记硬背的似的…</p>

<h2 id="servlet">Servlet</h2>

<p>Servlet是一个Java接口，实现了这个接口的实例运行在服务器上，可以对客户端的请求做出回应。一个著名的实现了Servlet接口的类是HttpServlet，它实现了解析常用的HTTP协议的功能，对通过URL进行的请求进行回应。</p>

<p>第一次调用一个servlet的时候，系统会初始化该类的一个对象，在这之后若调用同一个servlet，则会直接重用之前的那个实例。说是重用，实际上是多加一个线程。如果有十个人同时访问一个网站里的同一个servlet，那这个servlet就有是个线程，并且线程之间有共用资源，这也是为什么servlet不是线程安全的原因。</p>

<p>请求到来后，servlet可以根据HttpServletRequest来分析请求，并把相应以字符串的方式写入HttpServletResponse发回给浏览器。</p>

<h2 id="jsp">JSP</h2>

<p>JSP主要用在展现层，以模板的方式生成页面。JSP支持例如JSTL的来简化脚本，也支持表达式语言(Expression Language)来访问后台数据。一个JSP页面第一次被请求的时候，servlet容器会将其编译成一个HttpServlet的子类，在之后的访问中，就会一直重用这个编译好的类。</p>

<h2 id="jspservlet">JSP和Servlet的区别</h2>

<p>虽然JSP出现的比Servlet晚，但JSP并没有提供什么Servlet实现不了的功能。唯一的区别和好处就是，JSP让程序员把展现层和数据层分开，并且更加轻松的生成返回页面，而不是像在Servlet里一样费劲的用字符串拼凑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA中的匿名类]]></title>
    <link href="http://popol1991.github.com/blog/2012/12/13/javazhong-de-ni-ming-lei/"/>
    <updated>2012-12-13T00:19:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/12/13/javazhong-de-ni-ming-lei</id>
    <content type="html"><![CDATA[<h2 id="section">匿名类</h2>
<p>刚才随手翻了一下Thinking in JAVA，发现了一个以前没有注意过的概念：匿名类。其实之前已经使用过匿名类，只是没有注意罢了，对Collections或Arrays的自定义排序就是一个常见的应用：</p>

<p><code>java custom sort http://rosettacode.org/wiki/Sort_using_a_custom_comparator#Java
	Arrays.sort(strings, new Comparator&lt;String&gt;() {
      public int compare(String s1, String s2) {
        int c = s2.length() - s1.length();
        if (c == 0)
          c = s1.compareToIgnoreCase(s2);
        return c;
      }
    });
</code></p>

<p>注意这里的Comparator就是一个匿名类，它相当于实现了一个Comparator的子类。</p>

<h2 id="section-1">工厂方法</h2>
<p>用匿名类实现工厂方法让人生变得异常美好，实例代码如下：</p>

<p>``` java Factory Method via Anonymous Class lang:java
interface Product {
	void method1();
	void method1();
}</p>

<p>interface Factory {
	Product getProduct();
}</p>

<p>class Product1 implements Product {
	private Product() {};
	public void method1() {};
	public void method2() {};</p>

<pre><code>public static Factory factory {
	new Factory() {
		public Product getProduct() {
			return new Product1();
		}
	}
} }
</code></pre>

<p>class Product2 implements Product {
	private Product() {};
	public void method1() {};
	public void method2() {};</p>

<pre><code>public static Factory factory {
	new Factory() {
		public Product getProduct() {
			return new Product2();
		}
	}
} } ``` 有了匿名类，我们就不用给每一个具体产品写一个工厂类了！
</code></pre>

<h2 id="section-2">回调机制</h2>
<p>看到匿名类自然就想到javascript里的匿名函数，利用匿名函数我们可以很方便的实现事件驱动编程。这里有一篇不错的博客，用匿名类实现了类似于jQuery的链式操作：<a href="http://abruzzi.iteye.com/blog/539515">对Java中匿名类的一些思考</a></p>

]]></content>
  </entry>
  
</feed>
