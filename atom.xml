<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sound of Wind]]></title>
  <link href="http://popol1991.github.com/atom.xml" rel="self"/>
  <link href="http://popol1991.github.com/"/>
  <updated>2012-11-13T12:09:59+08:00</updated>
  <id>http://popol1991.github.com/</id>
  <author>
    <name><![CDATA[popol]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SE in NUS - Revision Note 1]]></title>
    <link href="http://popol1991.github.com/blog/2012/11/13/se-in-nus-revision-note-1/"/>
    <updated>2012-11-13T11:45:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/11/13/se-in-nus-revision-note-1</id>
    <content type="html"><![CDATA[<h1>Lecture 1</h1>

<h2>L1P1 - Software Engineering Rocks</h2>

<h3>Joys of the Craft</h3>

<ol>
<li>Sheer joy of making things.</li>
<li>Making things that are useful to other people.</li>
<li>Fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles, playing out the consequences of principles built in from the beginning.</li>
<li>Always learning, which springs from the nonrepeating nature of the task.</li>
<li>Delight of working in such a tractable medium.</li>
</ol>


<h3>Woes of the Craft</h3>

<ol>
<li>One must perform perfectly.</li>
<li>Other people set one&#8217;s objectives, provide one&#8217;s resources, and furnish one&#8217;s information.</li>
<li>Dependence upon others.</li>
<li>Designing grand concepts is fun; finding nitty little bugs is just work.</li>
<li>product obsolete upon/before completion.</li>
</ol>


<h2>L1P3 - Preventing Regression</h2>

<ul>
<li><strong>SUT</strong>: Software Under Test</li>
<li><strong>Scripted v.s. Exploratory Testing</strong>

<ul>
<li><strong>Exploratory</strong>: The next test case is based on what happened to the previous test cases; the success of exploratory testing depends on the tester&#8217;s prior experience and intuition.</li>
<li><strong>Scripted</strong>: predetermined set of test cases.</li>
<li><strong>Bach</strong>:&#8221;I find that most situations benefit from a mix of scripted and exploratory approaches.&#8221;</li>
</ul>
</li>
<li><strong>Regression Testing</strong>

<ul>
<li>The nature of software is such that even a tiny modification can result in a complete melt down of the whole system.</li>
<li>Regression testing is more effective when it is down frequently, hence it&#8217;s more practical if it is automated.</li>
</ul>
</li>
</ul>


<h1>Lecture 2</h1>

<h2>L2P1 - Good Code, Bad Code</h2>

<ul>
<li>Code Quality

<ul>
<li>Follow a standard</li>
<li>Proper Naming</li>
<li>Be obvious: 1.explicit type conversion; 2.parenthese/braces even when can skip; 3. &#8230;</li>
<li>No misuse of syntax: 1.default option; 2.one variable for one purpose; 3. &#8230;</li>
<li>Avoid error-prone practice</li>
<li>Minimize global variables</li>
<li>Avoid magic numbers</li>
<li>Throw out garbage</li>
<li>Minimize duplication</li>
<li>Make comments unnecessary: Use comments to explain &#8216;why&#8217; and &#8216;what&#8217; aspect of the code rather than the &#8216;how&#8217; aspect.</li>
<li>Be simple: &#8220;Premature optimization is the root of all evil in programming&#8221; &#8211; Knuth</li>
<li>Code for humans</li>
<li><strong>SLAP</strong>: Single Level of Abstraction Per Method</li>
<li>Do not release temporary code

<h2>L2P2 - Refactoring</h2></li>
<li>Some commonly used refactorings:

<ul>
<li><a href="http://refactoring.com/catalog/consolidateConditionalExpression.html">Consolidate Conditional Expression</a></li>
<li><a href="http://refactoring.com/catalog/decomposeConditional.html">Decompose Conditional</a></li>
<li><a href="http://refactoring.com/catalog/inlineMethod.html">Inline Method</a></li>
<li><a href="http://refactoring.com/catalog/introduceExplainingVariable.html">Introduce Explaining Variable</a></li>
<li><a href="http://refactoring.com/catalog/removeDoubleNegative.html">Remove Double Negative</a></li>
<li><a href="http://refactoring.com/catalog/replaceMagicNumberWithSymbolicConstant.html">Replace Magic Number with Symbolic Constant</a></li>
<li><a href="http://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html">Replace Nested Conditional with Guard Clauses</a></li>
<li><a href="http://refactoring.com/catalog/replaceParameterWithExplicitMethods.html">Replace Parameter with Explicit Methods</a></li>
<li><a href="http://refactoring.com/catalog/reverseConditional.html">Reverse Conditional</a></li>
<li><a href="http://refactoring.com/catalog/splitLoop.html">Split Loop</a></li>
<li><a href="http://refactoring.com/catalog/splitTemporaryVariable.html">Split Temporary Variable</a>

<h2>L2P3 - RCS</h2></li>
</ul>
</li>
<li>Centralized RCS: SVN, CVS</li>
<li>Distributed RCS: Mercurial, Git</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to manage my web reading list]]></title>
    <link href="http://popol1991.github.com/blog/2012/10/16/how-to-manage-my-reading-list/"/>
    <updated>2012-10-16T12:52:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/10/16/how-to-manage-my-reading-list</id>
    <content type="html"><![CDATA[<p>If you are using iOS and OS X devices, it would be really convenient and even elegent to manage your web reading list using the &#8216;read list&#8217; function of Safari and the automatically synchronization among multiple devices using iCloud.<br/>
However, after finish reading a web page, I want to archive them in some place from where tagging and searching could be easy.  Gmail comes to mind.<br/>
So I created a account for archive web pages, and every time I finish reading a page, I mail it out to the account using the &#8216;share&#8217; function of iDevices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我们差在哪了?]]></title>
    <link href="http://popol1991.github.com/blog/2012/09/26/wo-men-chai-zai-na-liao/"/>
    <updated>2012-09-26T21:50:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/09/26/wo-men-chai-zai-na-liao</id>
    <content type="html"><![CDATA[<p>上学期的成绩单出来，听闻我两年的总排名竟然进步了。考虑到上学期我的状态，以及这两个月在NUS的的所见所闻，真是难免思考:我们到底差在哪了？</p>

<p>背景是这样的。上学期，从过年一直到考期前夕，我一直在苦苦地准备GRE。有蔷哥正哥以及教五302的所有自习同学为证，每天除了上课我就坐在那个窗边的位置，至少得学上8个小时的英语，从白雪纷飞看到春暖花开。上课还是一如既往的水着，作业基本上都是要收的前一天晚上熬夜写完的，要做项目的OO课也是抱了队友的大腿。(说到这里，我必须感谢一下我那两个室友！考G期间加上之后搬宿舍出来交流麻烦了他们好多事情，都没来得及请他们吃饭我就出来了，回去必须好好款待一下。)就这样到了期末抱佛脚还算是考出了不错的成绩，排名竟然还进了步。这真的不是在炫耀，也不是说我排名高就多牛X了，但就是有点好奇：我亲爱的不考G也不搞ACM也不钻研技术也不泡妞也不泡吧也不打球的同学们，你们平时都在干什么呢？
然后最近的状况，来NUS两个月，有两个同学的例子一定要分享一下。<br/>
第一个是Software Engineering的队友，一个华裔马来籍新加坡人，叫WeiKeng。软件工程这种课，团队合作及其重要，组会、在线讨论什么是家常便饭。别的地方不知道，反正我以前接触过的这些东西都是一片混乱，没有要讨论的点，想到什么说什么；没有时间概念，经常东拉西扯；没有全员参与，总有那么几个人保持沉默。但在这里我们第一次开会我就惊了，WeiKeng在Google Doc上写下了要参考的内容和详细agenda，这些可都是没有规定谁是team leader，没有分配任务之前他自发做的。之后CS3246的项目也和他一组，人家早早完成了自己的任务，我却一拖再拖最后还是没能完成，搞得非常不好意思。另外，除了负责人和组织能力外，作为一个刚刚上大二的学生，WeiKeng的编码能力也不弱，起码比我暑假实习前要强很多，而且人家成绩也很好&#8230;后来了解到他服兵役的时候被分到sergent组学习管理和指挥，可能很多能力都得益于这两年的军事训练吧。
另外一个人是Lucie，从曼彻斯特大学来的交换生，读商科的硕士。话说我某天闲着没事儿在facebook上说想找一个native English speaker练习口语，作为交换我可以教他中文。本来我是只想找一个人一对一的，结果这个帖子一发不可收拾，最后搞成了一个有40多人的大组，里面基本是一半中国人想联系口语一半外国人想学中文。出现这种状况我脑袋顿时就大了，40个人可怎么管啊，没有时间啊&#8230;由于Lucie是第一个在脸书上回复我的人，第二天我们就一起出来商量这么多人要怎么组织，以及英语中文课上都要讲写什么。当时我想，教中文还不简单么，外国人中文都不咋地，随口教教他们拼音啥的就好了。于是我就两手空空的去跟Lucie讨论，结果又惊了&#8230;她在电脑上写了很详细的分组安排，英语课的内容，十几号大小的英文在word里写了有四五页吧&#8230;总之从那以后这个组名副其实的就是她在管，我纯抱大腿了&#8230;</p>

<p>跟这两个人比，我自愧不如，而且我认为在认识的范围内，没见过几个能比得上的，从学习到能力。可能这两个是特例不足以说明平均水平，可我是拿国内最好的人在跟他们比啊。国内最好的尚且比不上人家，剩下的又如何能竞争呢。</p>

<p>我们差在哪了呢，要在剩下的两个月里好好想想。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Post]]></title>
    <link href="http://popol1991.github.com/blog/2012/09/26/test-post/"/>
    <updated>2012-09-26T00:45:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/09/26/test-post</id>
    <content type="html"><![CDATA[<p>用Octopress在github上写博客这种方式太geek了，我喜欢~</p>

<p>第一篇test post就随便写一下在MacOS里怎么用ln命令使得我们可以轻松的在terminal里调用正常的应用。
以Sublime Text 2为例，正好我刚刚想用它来编辑我的blog，所以在terminal里输入以下命令：</p>

<pre><code>sudo touch /usr/local/bin/subl
sudo ln -f /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl`
</code></pre>

<p>然后就可以在命令行里直接用subl调用Sublime Text 2了！这样的好处是可以直接传递一些参数，不用每次都在图形界面里拖来拖去就是了！</p>
]]></content>
  </entry>
  
</feed>
