<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sound of Wind]]></title>
  <link href="http://popol1991.github.com/atom.xml" rel="self"/>
  <link href="http://popol1991.github.com/"/>
  <updated>2012-12-12T21:00:04+08:00</updated>
  <id>http://popol1991.github.com/</id>
  <author>
    <name><![CDATA[popol]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CS2103 in NUS -- 软件工程]]></title>
    <link href="http://popol1991.github.com/blog/2012/12/12/cs2103-in-nus-ruan-jian-gong-cheng/"/>
    <updated>2012-12-12T10:58:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/12/12/cs2103-in-nus-ruan-jian-gong-cheng</id>
    <content type="html"><![CDATA[<p>结束了在NUS四个月的学习生活，坐在舒服的家里，开始写这篇答应邹欣老师要写的NUS软件工程感想。
想直接看感想请直接跳到第三部分。</p>

<h2 id="section">简介</h2>

<ul>
  <li>课程代码为CS2103，先修课程为CS1020 – Data Structures and Algorightms 1 – 只在每学年上半学期开课，大部分为二年级学生，但也有三年级学生。</li>
  <li>每周3课时，2课时的lecture，1课时的tutorial。lecture主要讲理论内容；tutorial检查项目进度，检查作业，进行演示等。</li>
</ul>

<h2 id="section-1">课程形式</h2>

<h3 id="lecture">Lecture</h3>

<ul>
  <li>课前会有阅读材料，平均20页pdf左右，内容是这次课的理论内容外加一些热身练习题;</li>
  <li>课上有老师精心制作的幻灯片（真的是精心制作的！这是我上这么多年学看着的最好的课件没有之一），有短信互动，发短信回答问题可以拿平时分(那面叫paticipation point)；</li>
  <li>课后在学校的电子教务平台上有课后quiz，回顾一些课上的内容，也是拿paticipation point。</li>
</ul>

<h3 id="tutorial">Tutorial</h3>
<p>Tutorial也是给平时分，主要分三部分：</p>

<ul>
  <li>参与。 只要在哪坐足40分钟就能拿分。（lol）</li>
  <li>准备。 提前做好所有的作业，本周的tut作业和上周的lecture内容有关。</li>
  <li>互动。 </li>
</ul>

<p>作业是按照小组为单位做的。其实tutorial对我们最重要的是给tutor讲完作业或做过演示之后，可以得到很宝贵的反馈意见，然后我们就回去改进项目。</p>

<h3 id="section-2">项目</h3>
<p>前四周先是两个个人项目，然后是小组项目。小组项目是统一的，是除了图书馆管理系统外另一经典项目 – To-Do List。</p>

<p>需求分为Must-have和Extra：mast-have是一些基本的功能，使用命令行的todo list。Extra feature每个小组可以选其中一个实现，包括高级搜索，命令高度灵活，GUI，整合Google Calendar，或自己提出。</p>

<p>一共要做5次迭代，每个版本都有一些特定的评分点。</p>

<!-- more -->

<h3 id="section-3">考试</h3>
<p>考试是我认为比较有意思的。考试的内容就是让你在两个小时里构思一个软件。比如说我们这次一共有四大题，第一大题确定需求，写用户故事或画用例图；第二大题确定架构，通过顺序图确定一个典型用例中使用到的API；第三大题要求设计数据层的OO模型，要求应用Facade模式，并根据自己的设计说明是否符合Open-close原则，符合的话给出应用场景，不符合的话说明为什么；第四题用代码实现一个之前提到的API，然后针对这个API设计测试数据。</p>

<p>整个考试完全没有啃书本的东西，每一道题都是我们在设计一个软件的时候需要认真考虑的问题，我觉得很有意义。当然难度也很大，在两个小时里想要周全的设计出一个软件简直就是不可能，所以老师也说他主要看思路，会慷慨的给我们分数XD。</p>

<h3 id="section-4">评分</h3>
<p>平时 20%，项目 40%, 考试 40%。</p>

<h2 id="section-5">课程安排</h2>
<p>上图！</p>

<p><img src="http://popol1991.github.com/images/posts/schedual.png" /></p>

<h2 id="section-6">我的感想</h2>

<h3 id="damith">Damith</h3>
<p>先说说老师。没上课之前听说软件工程的老师 – 也就是Damith – 是个斯里兰卡人，顿时我就绝望了，这上课怎么能听得懂啊⋯⋯后来又听说国内的课是邹欣老师上，这下肠子都悔青了⋯⋯不过开始上课之后，发现Damith虽然有口音，但不像一般的斯里兰卡人那么严重。最重要的是，他真的是一个热衷于上课的人！</p>

<p>这里给大家看一下最后一节课的PPT（<a href="http://vdisk.weibo.com/s/ksQBE">点这下载</a>），里面的小人图都是他自己画的哈哈。每节课的幻灯片至少和这个是一样的水平，就算不看内容，我也很喜欢看他的ppt，加上他的讲解内容就更加丰富了。Damith对待上课的态度从PPT里可见一斑。大家都在吐槽JAVA课上的不好，找出了这样或那样的理由。但是有一条不能否认，JAVA老师哪怕有Damith一半的热情上课，最后的结果也不会那么惨烈。</p>

<h3 id="section-7">助教团队</h3>
<p>昨晚在微博上邹欣老师带头讨论习而学的问题，有人问了这么个<a href="http://www.cnblogs.com/WWW-Buaa/archive/2012/12/11/2813491.html">问题</a>：“如果你面对的是给一个系200多号人上软件工程课，请问软件工程课怎么上？”</p>

<p>我想了一下，一个老师，基本不可能。高中的班主任全职管理一个班级，也才五六十人。大学老师除了教学还有其他的科研任务，更别提例如邹欣老师还有公司里的工作。再者，软件工程是一个任务量极大的课程，那么多项目组，一个老师怎么可能顾得过来呢。</p>

<p>不过话说回来，谁说大学里上课就只有一个老师了？在NUS上的软件工程课，Damith是lecturer，另外有16个助教辅助教学。虽然lecture是大班上课，但tutorial是20人的小班上课，每班配两个助教，一个语言专家一个精通理论，效率很高。助教主要分为两部分，一小部分是研究生，而大部分是一年或两年前刚刚上过CS2103表现优秀的，现在在读大三大四的本科生。他们对这门课更有体会，所以也能更好的帮助我们。</p>

<p>以我们组为例，每次tutorial两个助教都会单独与每个小组进行交流，检查作业，提供反馈。我们的项目都放在Google Code上，助教每天都盯着我们的Issue Tracker，有什么问题会马上发邮件与我们进行交流。一学期下来，我们和助教基本上成了不错的朋友，互相之间的了解远胜于一般课程的师生。效果也好于其他的习题课。</p>

<h3 id="section-8">一点感想</h3>
<p>可能是由于自己底子还不错，在这门课学到的知识和技术其实并不多，但并不是没有收获。最主要的是感受到了在国内从未有的关怀和同学的上进。</p>

<p>还记得开课初有一个在线survey，调查我们的软工底子，其中一行是代码行数，我选了5000行以上。然后Damith就主动给我发了邮件，说我可能在这门课里不会学到很多东西，但是可以以这门课为媒介进行自学提高，帮助其他同学，如果表现的好之后还可以当助教（开学初就开始招徕助教了！）。学期进行中也有几次邮件的来往，非常亲切。在项目的最终deadline之前，Damith群发了这样一封邮件：“In case you need to verify something fast before the deadline, email or SMS me at 91<em>**</em>50 -damith”，都是关怀啊。</p>

<p>NUS有一个电子教务平台，上面每一门课都有一个很简单forum，学生和老师可以在里面发帖子。这种东西在国内其实也有，但是没有全校统一的，而且基本没人用。一开始我以为就像国内一样呢，但是后来发现不一样。每天都有很多同学把问题或者要分享的内容发在forum里，如果是问题的话，24小时内一定会有助教或者Damith本人回复。同学之间也经常互相回答问题。这个forum不仅仅软件工程是这样的活跃，其他的课也都一样，就像一个校内的stackoverflow一样。这样快速的反馈与分享是我在国内没见到过的，感觉是差距之一。</p>

<p>课程结束之后，我们都被加入了一个google group中，是课后用来交流实习信息和招聘信息的。而就在不久前就有一个师兄在group里发了向MS Raymond推荐暑期实习生的邀请，有一种送佛送到西的感觉~</p>

<p>另外，说道同学。就这门课而言，项目组队友的积极程度远远大于国内。国内的同学们都深有体会项目组是个什么样子吧，普遍现象是一两个大腿干活，几个人打酱油，进度能拖就拖。在NUS不一样，我们组里有一个新加坡人，一个马来西亚人，一个泰国人，一个加拿大人，加上我一个中国人。每个人都非常活跃的参与讨论、计划，每个人都在能力范围里尽可能的多做一些任务。因为我们组的技术主要是我负责，面对这样的队友，可以放心的把任务交给他们完成，我也可以安心的完成自己的任务。跟这样的团队合作，真是身心顺畅啊~</p>

<p>说道同学们的水平，当然也是参差不齐的，但平均来看还是要比国内高一些。由于在NUS上这门课的大多是二年级学生，所以主要是与一年前的我们比较的。空洞的讲他们的水平也没什么效果，我就讲一下作业量吧。我这一学期修了5门课，其中有三门是2开头的课也就大概是他们二年级上的课。完成了两个大作业和三次作业，总共写了8000+行代码。国内都说北航计算机系是比较注重动手实践的，但就代码行而言，一学期远远达不到8000这个水平。试想如果人家每个学期比我们多写三四千行代码，水平的差距大概会是多少呢？</p>

<h2 id="section-9">总结</h2>
<ul>
  <li>完成项目：Randezvous++, 代码量：5446, <a href="http://code.google.com/p/cs2103aug12-t14-3j/">repo</a></li>
  <li><a href="http://code.google.com/hosting/search?q=cs2103aug12&amp;btn=Search+projects">所有项目的google repo</a>(需要翻墙。。。)</li>
  <li>从一门课看开去，我们的差距早就不是硬件了，而是学校的态度，老师的态度，学生的态度。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to run program in Sublime Text 2]]></title>
    <link href="http://popol1991.github.com/blog/2012/11/22/how-to-run-program-in-sublime-text-2/"/>
    <updated>2012-11-22T22:44:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/11/22/how-to-run-program-in-sublime-text-2</id>
    <content type="html"><![CDATA[<p>Use C program for example:</p>

<p>In Sublime Text 2 <code>Tools-&gt;Build System-&gt;New Build System</code>.</p>

<p>Edit the file like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">	"cmd": ["gcc -o $file_base_name $file &amp;&amp; ./$file_base_name"],
</span><span class="line">	"path": "your $PATH variable",
</span><span class="line">	"shell": true
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For the value of <code>cmd</code>, you can type any shell command so that you can write other compile and execute command for other languages.  Since sublime text don’t have the access to local file, you need to set the value of your $PATH variable for <code>path</code>.</p>

<p>Now in your program file, press <code>Command+B</code>, the standard output will display in sublime text console!</p>

<p><img src="http://popol1991.github.com/images/posts/subl.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to solve Liquid error: undefined method for #]]></title>
    <link href="http://popol1991.github.com/blog/2012/11/17/how-to-resolve-liquid-error-undefined-method-for-number/"/>
    <updated>2012-11-17T14:26:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/11/17/how-to-resolve-liquid-error-undefined-method-for-number</id>
    <content type="html"><![CDATA[<p>I encounter this error when I was writing the last article and want to use jekyll-citation to generate reference in BibTeX syntax.</p>

<p>After a long time searching, I found that this error is caused by Liquid version 2.3.  So I degrade liquid to 2.2.2 and solve it successfully.</p>

<p>Only 2 steps are needed:</p>

<p>1.delete the original Liquid</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem uninstall liquid</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.change the Gemfile in Octopress, explicitly use 2.2.2 as the version.  And notice that you should not explicitly point out a version of jekyll, otherwise it will depend on liquid 2.3.  The Gemfile after modification should look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">source</span> <span class="s2">&quot;http://rubygems.org&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;rake&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.9.2&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;rack&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.4.1&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;jekyll&#39;</span>  <span class="c1">#don&#39;t write any verion</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;kramdown&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.14.0&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;pygments.rb&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.2.12&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;RedCloth&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.2.9&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;haml&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.1.6&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;compass&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.12.1&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;rubypants&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.2.0&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.9&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;stringex&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.4.0&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;liquid&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.2.2&#39;</span>  <span class="c1">#use 2.2.2 here</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;bibtex-ruby&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.1.2&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;citeproc-ruby&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;0.0.6&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;latex-decode&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;0.0.12&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.3.2&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factory Pattern]]></title>
    <link href="http://popol1991.github.com/blog/2012/11/17/factory-pattern/"/>
    <updated>2012-11-17T11:05:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/11/17/factory-pattern</id>
    <content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>In this semester’s software engineering module, we developed a command-line-interface (CLI) based to-do list.  As a CLI software, it has many commands, each of which accepts different arguments and does different things.  So, intuitively, we have many command classes, and for convenience we unified the interface of all command classes and extracted an abstract class called Command out.  As a consequence we can manipulate them in the same way.</p>

<p>After getting user input from command line system, the program has to decide which command is called by user and create a instance of that command class.  In this case, Factory Pattern comes to mind.  Here’s how we want to use the factory:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Command</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">commandFactory</span><span class="o">.</span><span class="na">createCommand</span><span class="o">(</span><span class="n">userInput</span><span class="o">);</span>
</span><span class="line"><span class="n">cmd</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class="line"><span class="n">showInCommandLine</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getFeedback</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="intent">Intent</h2>
<ul>
  <li>creates objects without exposing the instantiation logic to the client ( client is not aware of which specific concrete class is used )</li>
  <li>refers to newly created object through a common interface</li>
</ul>

<h2 id="class-diagram">Class Diagram</h2>
<p><img src="http://popol1991.github.com/images/posts/FactoryPattern.png" width="500" /></p>

<!-- more -->

<h2 id="implementation">Implementation</h2>
<p>At the beginning, we implemented it in the simplest approach – a bit switch statement in factory.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommandFactory</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">public</span> <span class="n">Command</span> <span class="nf">createCommand</span><span class="o">(</span><span class="n">String</span> <span class="n">userInput</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="k">switch</span> <span class="o">(</span><span class="n">userInput</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">			<span class="k">case</span> <span class="n">CMD1</span> <span class="o">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">CommandOne</span><span class="o">();</span>
</span><span class="line">			<span class="k">case</span> <span class="n">CMD2</span> <span class="o">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">CommandTwo</span><span class="o">();</span>
</span><span class="line">			<span class="o">...</span>
</span><span class="line">			<span class="k">default</span> <span class="o">:</span> <span class="k">return</span> <span class="k">new</span> <span class="n">InvalidCommand</span><span class="o">();</span>
</span><span class="line">			<span class="c1">// instead of returning a null value,</span>
</span><span class="line">			<span class="c1">// here we return a special case object[1]</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, the problem here is that once we want to provide a new command for users, we have to modify the switch arms in <code>CommandFactory</code>.  It violates the Open-Close Principle.  Subclassing the factory class is a solution, but that might lead to more modification in other code since a factory is often implemented as a singleton.</p>

<p>To solve this problem, we need to decouple the <code>CommandFactory</code> from any concrete command classes.  In other word, the <code>CommandFactory</code> should not be aware of what kind of command it is creating.  Because JAVA is our develop language, I thought reflection can be used.</p>

<p>Reflection is a feature provided by Java and .NET, it allows us creating a class by name of the class.  Given this feature, we have a configuration file that map each user input command to a specific command class with which the Factory can create class without knowing what it is.  Now the <code>CommandFactory</code> looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">cmdMap</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="nf">initMap</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="c1">// initialize the mapping from user input to command classes</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="n">Command</span> <span class="nf">createCommand</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	<span class="n">Command</span> <span class="n">command</span><span class="o">;</span>
</span><span class="line">	<span class="n">String</span> <span class="n">commandClassType</span> <span class="o">=</span> <span class="n">cmdMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span><span class="line">	<span class="k">if</span> <span class="o">(</span><span class="n">commandClassType</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="n">command</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvalidCommand</span><span class="o">();</span>
</span><span class="line">	<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">		<span class="k">try</span> <span class="o">{</span>
</span><span class="line">			<span class="n">Class</span><span class="o">&lt;</span><span class="n">Command</span><span class="o">&gt;</span> <span class="n">commandClass</span> <span class="o">=</span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">Command</span><span class="o">&gt;)</span> <span class="n">Class</span>
</span><span class="line">					<span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">commandClassType</span><span class="o">);</span>
</span><span class="line">			<span class="n">command</span> <span class="o">=</span> <span class="o">(</span><span class="n">Command</span><span class="o">)</span> <span class="n">commandClass</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class="line">					<span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">			<span class="n">command</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvalidCommand</span><span class="o">();</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	<span class="k">return</span> <span class="n">command</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="further">Further</h2>
<p>The implementation using reflection is the submit version of our project.  However, after days of thinking, I think the implementation still has some problems:</p>

<ol>
  <li>still need to modify the configuration file if we want to add new commands</li>
  <li>using reflection could make the software very slow</li>
  <li>even it’s not slow, not all language has reflection</li>
</ol>

<p>Therefore, after reading some materials, here’s a more elegant implementation that perfectly follows the Open-Close Principle and won’t slower the system, using self registration without reflection.</p>

<p>First, since we don’t want the factory know what class it is creating, and we don’t want to have a configuration file either, there has to be someone decide what should be created.  Second, in order to eliminating reflection, someone need to be responsible for creating a concrete class.  In this case, the concrete class itself is the best candidate, isn’t it?  </p>

<p>For the first reason, each concrete command should register itself.  For the second reason, we need to add a new interface to all command.  Now the command interface and concrete command class should look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Command</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">public</span> <span class="kd">abstract</span> <span class="n">Command</span> <span class="nf">createCommand</span><span class="o">();</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nc">OneCommand</span> <span class="kd">extends</span> <span class="n">Command</span> <span class="o">{</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">static</span> <span class="o">{</span>
</span><span class="line">		<span class="n">CommandFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="s">&quot;CMD1&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">OneCommand</span><span class="o">());</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">public</span> <span class="n">OneCommand</span> <span class="nf">createCommand</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">		<span class="k">return</span> <span class="k">new</span> <span class="nf">OneCommand</span><span class="o">();</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	<span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Provided these convenience, the <code>CommandFactory</code> becomes much easier:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">CommandFactory</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">String</span> <span class="n">commandID</span><span class="o">,</span> <span class="n">Command</span> <span class="n">cmd</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="n">cmdMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">commandID</span><span class="o">,</span> <span class="n">cmd</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="kd">public</span> <span class="n">Command</span> <span class="nf">createCommand</span><span class="o">(</span><span class="n">String</span> <span class="n">cmdID</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="k">return</span> <span class="o">((</span><span class="n">Command</span><span class="o">)</span> <span class="n">cmdMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">cmdID</span><span class="o">)).</span><span class="na">createCommand</span><span class="o">();</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="references">References</h2>

<p>[1]
Martin, R. C. (2008). <i>Clean Code: A Handbook of Agile Software Craftsmanship</i> (1 ed.). Upper Saddle River, NJ, USA: Prentice Hall PTR.</p>

<p>[2]
oodesign Factory Pattern. Retrieved from http://www.oodesign.com/factory-pattern.html</p>

<p>[3]
Saurabh_Saxenaamrita nevrekar. (2009, June). Exploring Factory Pattern. Retrieved from http://www.codeproject.com/Articles/37547/Exploring-Factory-Pattern</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Dependency and Normalization]]></title>
    <link href="http://popol1991.github.com/blog/2012/11/15/functional-dependency-and-normalization/"/>
    <updated>2012-11-15T10:07:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/11/15/functional-dependency-and-normalization</id>
    <content type="html"><![CDATA[<p><em>It’s a reference used by myself to teach others what functional dependency and normalization are.</em></p>

<h3 id="example">Example</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">id</th>
      <th style="text-align: center">firstName</th>
      <th style="text-align: center">lastName</th>
      <th style="text-align: center">address</th>
      <th style="text-align: center">department</th>
      <th style="text-align: center">position</th>
      <th style="text-align: center">salary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">Dewi</td>
      <td style="text-align: center">Srijaya</td>
      <td style="text-align: center">addr1</td>
      <td style="text-align: center">Toys</td>
      <td style="text-align: center">Clerk</td>
      <td style="text-align: center">2000</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Lzabel</td>
      <td style="text-align: center">Leong</td>
      <td style="text-align: center">addr2</td>
      <td style="text-align: center">Sports</td>
      <td style="text-align: center">Trainee</td>
      <td style="text-align: center">1200</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">John</td>
      <td style="text-align: center">Smith</td>
      <td style="text-align: center">addr3</td>
      <td style="text-align: center">Toys</td>
      <td style="text-align: center">Clerk</td>
      <td style="text-align: center">2000</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">Axel</td>
      <td style="text-align: center">Bayer</td>
      <td style="text-align: center">addr4</td>
      <td style="text-align: center">Sports</td>
      <td style="text-align: center">Trainee</td>
      <td style="text-align: center">1200</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">Winnie</td>
      <td style="text-align: center">Lee</td>
      <td style="text-align: center">addr5</td>
      <td style="text-align: center">Sports</td>
      <td style="text-align: center">Manager</td>
      <td style="text-align: center">2500</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">Sylvia</td>
      <td style="text-align: center">Tok</td>
      <td style="text-align: center">addr6</td>
      <td style="text-align: center">Toys</td>
      <td style="text-align: center">Manager</td>
      <td style="text-align: center">2600</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">Eric</td>
      <td style="text-align: center">Wei</td>
      <td style="text-align: center">addr7</td>
      <td style="text-align: center">Toys</td>
      <td style="text-align: center">Assistant Manager</td>
      <td style="text-align: center">2200</td>
    </tr>
    <tr>
      <td style="text-align: center">?</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">Security Guard</td>
      <td style="text-align: center">1500</td>
    </tr>
  </tbody>
</table>

<p>The table above has many potential problems such <strong>Insertion anomaly</strong>, <strong>Update anomaly</strong> and lots of <strong>Redundant storage</strong>.  In order to eliminate these problems, we can decompose it into 2 tables below.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">id</th>
      <th style="text-align: center">firstName</th>
      <th style="text-align: center">lastName</th>
      <th style="text-align: center">address</th>
      <th style="text-align: center">department</th>
      <th style="text-align: center">position</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">Dewi</td>
      <td style="text-align: center">Srijaya</td>
      <td style="text-align: center">addr1</td>
      <td style="text-align: center">Toys</td>
      <td style="text-align: center">Clerk</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">Lzabel</td>
      <td style="text-align: center">Leong</td>
      <td style="text-align: center">addr2</td>
      <td style="text-align: center">Sports</td>
      <td style="text-align: center">Trainee</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">John</td>
      <td style="text-align: center">Smith</td>
      <td style="text-align: center">addr3</td>
      <td style="text-align: center">Toys</td>
      <td style="text-align: center">Clerk</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">Axel</td>
      <td style="text-align: center">Bayer</td>
      <td style="text-align: center">addr4</td>
      <td style="text-align: center">Sports</td>
      <td style="text-align: center">Trainee</td>
    </tr>
    <tr>
      <td style="text-align: center">5</td>
      <td style="text-align: center">Winnie</td>
      <td style="text-align: center">Lee</td>
      <td style="text-align: center">addr5</td>
      <td style="text-align: center">Sports</td>
      <td style="text-align: center">Manager</td>
    </tr>
    <tr>
      <td style="text-align: center">6</td>
      <td style="text-align: center">Sylvia</td>
      <td style="text-align: center">Tok</td>
      <td style="text-align: center">addr6</td>
      <td style="text-align: center">Toys</td>
      <td style="text-align: center">Manager</td>
    </tr>
    <tr>
      <td style="text-align: center">7</td>
      <td style="text-align: center">Eric</td>
      <td style="text-align: center">Wei</td>
      <td style="text-align: center">addr7</td>
      <td style="text-align: center">Toys</td>
      <td style="text-align: center">Assistant Manager</td>
    </tr>
    <tr>
      <td style="text-align: center">?</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">?</td>
      <td style="text-align: center">Security Guard</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: center">position</th>
      <th style="text-align: center">salary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Clerk</td>
      <td style="text-align: center">2000</td>
    </tr>
    <tr>
      <td style="text-align: center">Trainee</td>
      <td style="text-align: center">1200</td>
    </tr>
    <tr>
      <td style="text-align: center">Manager</td>
      <td style="text-align: center">2500</td>
    </tr>
    <tr>
      <td style="text-align: center">Assistant Manager</td>
      <td style="text-align: center">2200</td>
    </tr>
    <tr>
      <td style="text-align: center">Security Guard</td>
      <td style="text-align: center">1500</td>
    </tr>
  </tbody>
</table>

<h3 id="definitions">Definitions</h3>
<ul>
  <li>Trivial / Non-Trivial / Complete Non-Trivial FDs</li>
  <li>SuperKeys</li>
  <li>Candidate Keys: <strong>minimal</strong></li>
  <li>Primary Keys: one of candidate key</li>
</ul>

<h3 id="reasonning">Reasonning</h3>
<ul>
  <li>Armstrong’s Axioms
$$
\begin{align}
\mbox{Refelxivity: } &amp; \mbox{ if } Y\subset X \mbox{ then } X\rightarrow Y 
\end{align}
$$</li>
</ul>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Augmentation: } & \mbox{ if } X\rightarrow Y \mbox{ then } X\cup Z\rightarrow Y\cup Z 
\end{align}
 %]]&gt;</script>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Transitivity: } & \mbox{ if } X\rightarrow Y \mbox{ and } Y\rightarrow Z \mbox{ then } X\rightarrow Z 
\end{align}
 %]]&gt;</script>

<h3 id="closure-and-equivalence">Closure and Equivalence</h3>
<ul>
  <li>For a set F of functional dependencies, we call the closure of $ F $, noted $ F+ $, the set of all functional dependencies that F implies.</li>
  <li>Two sets of functional dependencies $ F $ and $ G $ are equivalent if and only if $ F+=G+$</li>
  <li>Closure can be used for fingding keys</li>
</ul>

<h3 id="minimal-cover">Minimal Cover</h3>
<ul>
  <li>A set of dependencies F is minimal if and only if:
    <ol>
      <li>Every right-hand side is a single attribute</li>
      <li>For no functional dependency $ X\rightarrow A $ in $ F $ and proper subset $ Z $ of $ X $ is $ F- ( X\rightarrow A ) \cup ( Z\rightarrow A ) $ equivalent to $ F $ ( $ X $ cannot be simplified)</li>
      <li>For no function dependency $ X\rightarrow A $ in $ F $ is the set $ F- ( X\rightarrow A ) $ equivalent to $ F $ ( $ X\rightarrow A $ is not extraneous)</li>
    </ol>
  </li>
  <li>A set of functional dependencies $ F $ is a <strong>minimal cover</strong> of a set of funcitonal dependencies $ G $ if and only if
    <ul>
      <li>$ F $ is minimal</li>
      <li>$ F $ is equivalent to $ G $</li>
      <li>( $ F $ can be impied by $ G $, and $ F $ is minimal )</li>
    </ul>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SE in NUS - Revision Note 2]]></title>
    <link href="http://popol1991.github.com/blog/2012/11/13/se-in-nus-revision-note-2/"/>
    <updated>2012-11-13T13:27:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/11/13/se-in-nus-revision-note-2</id>
    <content type="html"><![CDATA[<h1 id="lecture-3">Lecture 3</h1>

<h2 id="l3p1---figuring-out-requirements">L3P1 - Figuring out Requirements</h2>
<ul>
  <li>Functional requirements specify what the system should do.</li>
  <li>Non-functional requirements specify the constraints under which system gets developed and operated.</li>
</ul>

<h3 id="establishing-requirements">Establishing Requirements</h3>
<ul>
  <li>Commonly used techniques to gather requirements (Note: All these techniques are also useful for investors or programmers themselves to decide whether the program is desirable to be implemented)
    <ul>
      <li>Brainstorming</li>
      <li>User surveys</li>
      <li>Observation</li>
      <li>Interviews</li>
      <li>Focus groups</li>
      <li>Prototyping (Note: prototype is important for incremental programming, especially agile development.  It is very useful for further specifying the requirements because hardly no one could clearly know what they want until they really use the program.  On the other hand, for developers, especially student programmer, it could be very encouraging that the program is always runnable.)</li>
      <li>Analyzing similar products and documentation</li>
    </ul>
  </li>
</ul>

<h3 id="specifying-requirements">Specifying Requirements</h3>
<ul>
  <li>Some tools and techniques that can be used to specify requirements
    <ul>
      <li>Textual descriptions</li>
      <li>Feature list</li>
      <li>User stories
  <img class="right" src="http://popol1991.github.com/images/posts/use%20case.png" width="200" /></li>
      <li>Use Case: A use case describes an interaction between the user and the system for <strong>a specific functionality</strong> of the system.
        <ul>
          <li>Main Success Scenario (MSS) describes the most straightforward interaction for a given use case, which assumes nothing goes wrong.</li>
          <li>Extensions, given below the MSS, are exceptional flow or alternative flow of events.</li>
        </ul>
      </li>
      <li>Glossary: ensure all stakeholders have a common understanding of the noteworthy terms, abbreviation, acronyms etc.</li>
    </ul>
  </li>
</ul>

<h2 id="l3p2---designing-the-product">L3P2 - Designing the Product</h2>
<!--more-->
<p>### Product Design
* Focus features: Focus on the must-have features, always aim in <strong>one direction</strong>.
* Focus users: Develop software for someone, not for everyone.
* Usability is king: don’t make user stupid. Minimize work for users, for example clicks, choices, switching between mouse and keyboard, etc.</p>

<h1 id="lecture-4">Lecture 4</h1>
<p>## L4P1 - Architecture</p>

<h3 id="common-architecture-styles">Common Architecture Styles</h3>
<ul>
  <li>N-Tier Architecture
    <ul>
      <li>Higher layers make use of services provided by lower layers. </li>
      <li>Notice that Lower layers are independent of higher layers.</li>
      <li>Comman layers: UI-Logic-Storage, Service-DAO</li>
    </ul>
  </li>
  <li>Client-Server/Browser-Server</li>
  <li>Transaction Processing Architecture
    <ul>
      <li>transactions are given to a <strong>dispatcher</strong> that controls the execution of each transaction. </li>
    </ul>
  </li>
  <li>Service-oriented Architecture (SOA) 
    <ul>
      <li>Example: Web Service</li>
    </ul>
  </li>
</ul>

<h3 id="components-and-aips">Components and AIPs</h3>
<ul>
  <li><strong>Interface</strong>: the list of public operations supported by a component and what each operation does.</li>
  <li><strong>Application Programming Interface (API)</strong>: contract between the component and its users, which could be other components as well as other softwares.</li>
  <li><strong>Modeling component behavior using Sequence Diagrams</strong>
<img class="right" src="http://popol1991.github.com/images/posts/sd.png" width="300" />
    <ul>
      <li>A UML sequence diagram captures the <em>interactions between multiple components for a given scenario.</em></li>
      <li>Discover APIs from SD</li>
    </ul>
  </li>
</ul>

<h3 id="different-approaches-to-design">Different approaches to design</h3>
<ul>
  <li><strong>Top-down V.S. Bottom-up</strong>
    <ul>
      <li><strong>Top-down</strong>: start from very high-level by taking the system as one big black box and then broke it into a handful of smaller components.  When using top-down design, we do not have to worry about low level details until much later int he design and the low level details of a given component can be worked out by those working on that component, without getting the whole team involved.  <strong>The top-down approach is often used when creating a big product from scratch.</strong></li>
      <li><strong>Bottom-up</strong>: start with lower level details (e.g. data structures, storage formats, functions etc.) and progressively group them together to create bigger components.  <strong>This is often used when the system is small or when we are building a variation of a product we’ve built before and we already have a large collection of reusable assets from the previous product that we can use in the new product.</strong></li>
    </ul>
  </li>
  <li><strong>Agile V.S. Full-design-up-front</strong>
    <ul>
      <li>Agile Development is adapt to changes.</li>
      <li>Full-design-up-front Development is more applicable for system like outer space exploring system used by NASA.</li>
    </ul>
  </li>
</ul>

<h2 id="l4p2---never-too-early-to-test">L4P2 - Never Too Early to Test</h2>

<h3 id="cost-of-fixing-software-bugs">Cost of Fixing Software Bugs</h3>
<p>The earlier we find a bug, the easier and cheaper to fix it.
<img class="right" src="http://popol1991.github.com/images/posts/cost_of_test.png" />
* <strong>Unit Test</strong>: unit testing is for testing of individual units (methods, classes, subsystems, …)
* <strong>Integration Test</strong>: Integration testing allows verification of the correctness of interactions between subsystems.</p>

<h3 id="automated-api-testing">Automated API testing</h3>
<ul>
  <li>Test Driver: invoke the SUT with test inputs.</li>
  <li>Stub/Mock: a dummy module that receives outgoing messages from the SUT
    <ul>
      <li>Do noghing</li>
      <li>Keep records</li>
      <li>Return hard-coded responses</li>
    </ul>
  </li>
</ul>

<h3 id="test-driven-development-tdd">Test-Driven Development (TDD)</h3>
<ol>
  <li>Decide what behavior to implement.</li>
  <li>write test cases to test that behavior.</li>
  <li>run those test cases and watch them fail.</li>
  <li>implement the behavior.</li>
  <li>run the test case.</li>
  <li>keep modifying the code and rerunning test cases until they all pass.</li>
  <li>refactor code to improve quality.</li>
  <li>repeat the cycle for each small unit of behavior you want to implement.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SE in NUS - Revision Note 1]]></title>
    <link href="http://popol1991.github.com/blog/2012/11/13/se-in-nus-revision-note-1/"/>
    <updated>2012-11-13T11:45:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/11/13/se-in-nus-revision-note-1</id>
    <content type="html"><![CDATA[<h1 id="lecture-1">Lecture 1</h1>
<p>## L1P1 - Software Engineering Rocks
### Joys of the Craft
1. Sheer joy of making things.
2. Making things that are useful to other people.
3. Fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles, playing out the consequences of principles built in from the beginning.
4. Always learning, which springs from the nonrepeating nature of the task.
5. Delight of working in such a tractable medium.</p>

<h3 id="woes-of-the-craft">Woes of the Craft</h3>
<ol>
  <li>One must perform perfectly.</li>
  <li>Other people set one’s objectives, provide one’s resources, and furnish one’s information.</li>
  <li>Dependence upon others.</li>
  <li>Designing grand concepts is fun; finding nitty little bugs is just work.</li>
  <li>product obsolete upon/before completion.</li>
</ol>

<h2 id="l1p3---preventing-regression">L1P3 - Preventing Regression</h2>
<ul>
  <li><strong>SUT</strong>: Software Under Test
Surround your pullquote like this {“ text to be quoted “}</li>
  <li><strong>Regression Testing</strong>
<!--more-->
    <ul>
      <li>The nature of software is such that even a tiny modification can result in a complete melt down of the whole system.</li>
      <li>Regression testing is more effective when it is down frequently, hence it’s more practical if it is automated.</li>
    </ul>
  </li>
</ul>

<h1 id="lecture-2">Lecture 2</h1>

<h2 id="l2p1---good-code-bad-code">L2P1 - Good Code, Bad Code</h2>
<ul>
  <li>Code Quality
Surround your pullquote like this {“ text to be quoted “}</li>
</ul>

<h2 id="l2p2---refactoring">L2P2 - Refactoring</h2>
<ul>
  <li>Some commonly used refactorings:
    <ul>
      <li><a href="http://refactoring.com/catalog/consolidateConditionalExpression.html">Consolidate Conditional Expression</a></li>
      <li><a href="http://refactoring.com/catalog/decomposeConditional.html">Decompose Conditional</a></li>
      <li><a href="http://refactoring.com/catalog/inlineMethod.html">Inline Method</a></li>
      <li><a href="http://refactoring.com/catalog/introduceExplainingVariable.html">Introduce Explaining Variable</a></li>
      <li><a href="http://refactoring.com/catalog/removeDoubleNegative.html">Remove Double Negative</a></li>
      <li><a href="http://refactoring.com/catalog/replaceMagicNumberWithSymbolicConstant.html">Replace Magic Number with Symbolic Constant</a></li>
      <li><a href="http://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html">Replace Nested Conditional with Guard Clauses</a></li>
      <li><a href="http://refactoring.com/catalog/replaceParameterWithExplicitMethods.html">Replace Parameter with Explicit Methods</a></li>
      <li><a href="http://refactoring.com/catalog/reverseConditional.html">Reverse Conditional</a></li>
      <li><a href="http://refactoring.com/catalog/splitLoop.html">Split Loop</a></li>
      <li><a href="http://refactoring.com/catalog/splitTemporaryVariable.html">Split Temporary Variable</a></li>
    </ul>
  </li>
</ul>

<h2 id="l2p3---rcs">L2P3 - RCS</h2>
<ul>
  <li>Centralized RCS: SVN, CVS</li>
  <li>Distributed RCS: Mercurial, Git</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to manage my web reading list]]></title>
    <link href="http://popol1991.github.com/blog/2012/10/16/how-to-manage-my-reading-list/"/>
    <updated>2012-10-16T12:52:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/10/16/how-to-manage-my-reading-list</id>
    <content type="html"><![CDATA[<p>If you are using iOS and OS X devices, it would be really convenient and even elegent to manage your web reading list using the ‘read list’ function of Safari and the automatically synchronization among multiple devices using iCloud.<br />
However, after finish reading a web page, I want to archive them in some place from where tagging and searching could be easy.  Gmail comes to mind.<br />
So I created a account for archive web pages, and every time I finish reading a page, I mail it out to the account using the ‘share’ function of iDevices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我们差在哪了?]]></title>
    <link href="http://popol1991.github.com/blog/2012/09/26/wo-men-chai-zai-na-liao/"/>
    <updated>2012-09-26T21:50:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/09/26/wo-men-chai-zai-na-liao</id>
    <content type="html"><![CDATA[<p>上学期的成绩单出来，听闻我两年的总排名竟然进步了。考虑到上学期我的状态，以及这两个月在NUS的的所见所闻，真是难免思考:我们到底差在哪了？</p>

<p>背景是这样的。上学期，从过年一直到考期前夕，我一直在苦苦地准备GRE。有蔷哥正哥以及教五302的所有自习同学为证，每天除了上课我就坐在那个窗边的位置，至少得学上8个小时的英语，从白雪纷飞看到春暖花开。上课还是一如既往的水着，作业基本上都是要收的前一天晚上熬夜写完的，要做项目的OO课也是抱了队友的大腿。(说到这里，我必须感谢一下我那两个室友！考G期间加上之后搬宿舍出来交流麻烦了他们好多事情，都没来得及请他们吃饭我就出来了，回去必须好好款待一下。)就这样到了期末抱佛脚还算是考出了不错的成绩，排名竟然还进了步。这真的不是在炫耀，也不是说我排名高就多牛X了，但就是有点好奇：我亲爱的不考G也不搞ACM也不钻研技术也不泡妞也不泡吧也不打球的同学们，你们平时都在干什么呢？
然后最近的状况，来NUS两个月，有两个同学的例子一定要分享一下。<br />
第一个是Software Engineering的队友，一个华裔马来籍新加坡人，叫WeiKeng。软件工程这种课，团队合作及其重要，组会、在线讨论什么是家常便饭。别的地方不知道，反正我以前接触过的这些东西都是一片混乱，没有要讨论的点，想到什么说什么；没有时间概念，经常东拉西扯；没有全员参与，总有那么几个人保持沉默。但在这里我们第一次开会我就惊了，WeiKeng在Google Doc上写下了要参考的内容和详细agenda，这些可都是没有规定谁是team leader，没有分配任务之前他自发做的。之后CS3246的项目也和他一组，人家早早完成了自己的任务，我却一拖再拖最后还是没能完成，搞得非常不好意思。另外，除了负责人和组织能力外，作为一个刚刚上大二的学生，WeiKeng的编码能力也不弱，起码比我暑假实习前要强很多，而且人家成绩也很好…后来了解到他服兵役的时候被分到sergent组学习管理和指挥，可能很多能力都得益于这两年的军事训练吧。
另外一个人是Lucie，从曼彻斯特大学来的交换生，读商科的硕士。话说我某天闲着没事儿在facebook上说想找一个native English speaker练习口语，作为交换我可以教他中文。本来我是只想找一个人一对一的，结果这个帖子一发不可收拾，最后搞成了一个有40多人的大组，里面基本是一半中国人想联系口语一半外国人想学中文。出现这种状况我脑袋顿时就大了，40个人可怎么管啊，没有时间啊…由于Lucie是第一个在脸书上回复我的人，第二天我们就一起出来商量这么多人要怎么组织，以及英语中文课上都要讲写什么。当时我想，教中文还不简单么，外国人中文都不咋地，随口教教他们拼音啥的就好了。于是我就两手空空的去跟Lucie讨论，结果又惊了…她在电脑上写了很详细的分组安排，英语课的内容，十几号大小的英文在word里写了有四五页吧…总之从那以后这个组名副其实的就是她在管，我纯抱大腿了…</p>

<p>跟这两个人比，我自愧不如，而且我认为在认识的范围内，没见过几个能比得上的，从学习到能力。可能这两个是特例不足以说明平均水平，可我是拿国内最好的人在跟他们比啊。国内最好的尚且比不上人家，剩下的又如何能竞争呢。</p>

<p>我们差在哪了呢，要在剩下的两个月里好好想想。	</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Post]]></title>
    <link href="http://popol1991.github.com/blog/2012/09/26/test-post/"/>
    <updated>2012-09-26T00:45:00+08:00</updated>
    <id>http://popol1991.github.com/blog/2012/09/26/test-post</id>
    <content type="html"><![CDATA[<p>用Octopress在github上写博客这种方式太geek了，我喜欢~</p>

<p>第一篇test post就随便写一下在MacOS里怎么用ln命令使得我们可以轻松的在terminal里调用正常的应用。
以Sublime Text 2为例，正好我刚刚想用它来编辑我的blog，所以在terminal里输入以下命令：</p>

<pre><code>sudo touch /usr/local/bin/subl
sudo ln -f /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl`
</code></pre>

<p>然后就可以在命令行里直接用subl调用Sublime Text 2了！这样的好处是可以直接传递一些参数，不用每次都在图形界面里拖来拖去就是了！</p>
]]></content>
  </entry>
  
</feed>
